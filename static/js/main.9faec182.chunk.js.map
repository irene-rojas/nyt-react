{"version":3,"sources":["components/Search/Search.js","components/ResultsModel/ResultsModel.js","components/Results/Results.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","react_default","a","createElement","className","id","defaultValue","query","type","name","onChange","startYear","endYear","onClick","onSubmit","ResultsModel","title","href","url","target","rel","Results","articles","length","map","article","components_ResultsModel_ResultsModel","key","_id","headline","main","web_url","date","pub_date","App","state","event","_event$target","value","_this","setState","Object","defineProperty","preventDefault","axios","get","concat","process","then","res","data","response","docs","components_Search_Search","this","components_Results_Results","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9faec182.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Search.css\";\n\nconst Search = (props) => (\n\n    <div className=\"wrapper\">\n\n        <form className=\"form\">\n\n            <div id=\"queryDiv\">\n                <p>Query</p>\n                <input id=\"queryValue\"\n                    defaultValue={props.query}\n                    type=\"text\"\n                    name=\"query\"\n                    onChange={props.onChange}\n                />\n            </div>\n            \n            <div id=\"startYearDiv\">\n            <p> Start Year</p>\n                <input\n                    defaultValue={props.startYear}\n                    type=\"number\"\n                    name=\"startYear\"\n                    onChange={props.onChange}\n                />\n            </div>\n\n            <div id=\"endYearDiv\">\n                <p>End Year</p>\n                <input\n                    defaultValue={props.endYear}\n                    type=\"number\"\n                    name=\"endYear\"\n                    onChange={props.onChange}\n                />\n            </div>\n\n            <br />\n\n            <button onClick={props.onSubmit}>Submit</button>\n\n        </form>\n\n    </div>\n\n)\n\nexport default Search;","import React from \"react\";\nimport \"./ResultsModel.css\";\n\nconst ResultsModel = (props) => (\n\n    <div className=\"individualResult\">\n        <div className=\"headline\">{props.title}</div>\n        <a href={props.url} target=\"_blank\" rel=\"noopener noreferrer\">\n        Read story</a>\n    </div>\n\n)\n\nexport default ResultsModel;","import React from \"react\";\nimport ResultsModel from \"../ResultsModel/ResultsModel\";\nimport \"./Results.css\";\n\nconst Results = (props) => (\n\n        <section className=\"masterDiv resultsDiv\">\n\n            {props.articles.length ? (\n                <div>\n                  {props.articles.map(article => (\n                    <ResultsModel\n                      key={article._id}\n                      _id={article._id}\n                      title={article.headline.main}\n                      url={article.web_url}\n                      date={article.pub_date}\n                    />\n                  ))}\n                </div>\n              ) : (\n                <h2 className=\"text-center\">No articles</h2>\n              )}\n              \n        </section>\n)\n\nexport default Results;\n","import React, { Component } from 'react';\nimport './App.css';\nimport axios from \"axios\";\nimport Search from \"./components/Search/Search\";\nimport Results from \"./components/Results/Results\";\n\nclass App extends Component {\n\n    state = {\n        query: \"\",\n        startYear: \"\",\n        endYear: \"\",\n        articles: []\n        // empty array for results\n    };\n\n    // multiple text fields\n    onChange = event => {\n        const {name, value} = event.target;\n        this.setState({\n            [name]: value\n        });\n    };\n\n    onSubmit = (event) => {\n        event.preventDefault();\n        axios.get(`https://api.nytimes.com/svc/search/v2/articlesearch.json?q=${this.state.query}&api-key=${process.env.REACT_APP_NYT_API_KEY}&facet_fields=source&facet=true&begin_date=${this.state.startYear}0101&end_date=${this.state.endYear}1231`)\n        .then(res => {\n            this.setState({\n                articles: res.data.response.docs\n            })\n            // console.log(this.state.articles);\n        });\n    }\n\n  render() {\n    return (\n    \n        <div className=\"parallax\">\n            \n        <div className=\"App\">\n\n            <header className=\"header\">\n                <h1>'The New York Times' Article Search</h1>\n                <p>Search for articles from \"The New York Times\"</p>\n            </header>\n\n            <section className=\"searchDiv\">\n                <h2 id=\"searchWord\">Search</h2>\n                <div className=\"inputFields\">\n                    <Search \n                        query={this.state.query} \n                        onChange={this.onChange} \n                        onSubmit={this.onSubmit} \n                        startYear={this.state.startYear} \n                        endYear={this.state.endYear}\n                    />\n                </div>\n            </section>\n\n            {this.state.articles.length > 0 && \n                <div className=\"resultsDiv\">\n                <h2 id=\"resultWord\">Results</h2>\n                <Results \n                    articles={this.state.articles} \n                />\n            </div>}\n\n        </div>\n\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}